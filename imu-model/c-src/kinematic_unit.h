/*
 * kinematic_unit.h
 *
 *  Created on: 23 февр. 2017 г.
 *      Author: RaKetov
 */

/*
 * МОДУЛЬ, ОТВЕЧАЮЩИЙ ЗА ОПРЕДЕЛЕНИЕ
 * ПОЛОЖЕНИЯ И ОРИНЕТАЦИИ АППАРАТА
 * В ПРОСТРАНСТВЕ
 * */
#ifndef KINEMATIC_UNIT_H_
#define KINEMATIC_UNIT_H_

#include <stdint.h>


//FIXME: ЭТО ВРЕМЕННО!
# define M_PI		3.14159265358979323846	//число PI

/*=================================================================================*/
/*===============================ОПИСАНИЕ=СТРУКТУР=================================*/
/*=================================================================================*/
//СТРУКТУРА КИНЕМАТИЧЕСКОГО СОСТОЯНИЯ АППАРАТА
typedef struct
{

	float aRelatedXYZ[3];	//ускорения в единицах g (в ССК)
	float gRelatedXYZ[3];	//угловые скорости в degps (в ССК)
	float cRelatedXYZ[3];	//косинусы углов вектора магнитного поля с осями ССК
	float pressure;

	float a_XYZ[3];			//ускорения в м/с^2 (ИСК)
	float a_XYZ_prev[3];	//ускорения в м/с^2 (ИСК) предыдущие
	float v_XYZ[3];			//скорости  в м/с   (ИСК)
	float v_XYZ_prev[3];	//скорости  в м/с   (ИСК) предыдущие
	float s_XYZ[3];			//перемещения в м   (ИСК)
	float w_XYZ[3];			//угловые скорости в 1/с (ИСК)
	float w_XYZ_prev[3];	//угловые скорости в 1/с (ИСК) предыдущие

	//Матрица поворота ССК относительно ИСК
	float f_XYZ[3][3];		//(строка, столбец)
	float f_XYZ_prev[3][3];	//(строка, столбец) предыдущая

	//Единичный вектор магнитного поля
	float B_XYZ[3];

	float time;				//время текущей итерации
	float previous_time;	//время предыдущей итерации

}state;


//Матрица поворота
typedef struct
{
	float f_XYZ[3][3];
}rotation_matrix;

//Необработанные данные для передачи по радиоканалу
typedef struct
{
	int16_t aTransmitXYZ[3];
	int16_t gTransmitXYZ[3];
	int16_t cTransmitXYZ[3];

}transmit_data;
/*=================================================================================*/
/*=================================================================================*/

//КИНЕМАИТЧЕСКОЕ СОСТОЯНИЕ АППАРАТА
extern state STATE;

extern transmit_data TRANSMIT_DATA;


void set_cos_to_1(float * cosalpha);


/*=================================================================================*/
/*===============================ОПИСАНИЕ=ФУНКЦИЙ==================================*/
/*=================================================================================*/
//ИНИЦИАЛИЗИРУЕТ ПРОГРАММУ КИНЕМАТИЧЕСКОГО СОСТОЯНИЯ АППАРАТА, А ТАК ЖЕ ДРАЙВЕРЫ ВНЕШНИХ УСТРОЙСТВ
void kinematicInit(float * a,float w,float * s, float * v);

//ПЕРЕВОДИТ ПОЛУЧЕННЫЙ ВЕКТОР ИЗ СВЯЗАННОЙ СИСТЕМЫ КООРДИНАТ В ИНЕРЦИАЛЬНУЮ, ИСПОЛЬЗУЯ МАТРИЦУ ПОВОРОТА STATE.fXYZ[3][3]
void RSC_to_ISC_recalc(float * RSC_vect, float * ISC_vect);		//R - related, I - inertional

//УСТАНОВКА ИСК (запись поправочных направляющих косинусов)
void set_ISC_offset();

//ЗАПИСЬ МАТРИЦЫ НАПРАВЛЯЮЩИХ КОСИНУСОВ ВЕКТОРА МАГНИТНОГО ПОЛЯ С ОСЯМИ ИСК
void set_magn_dir();

//ОСУЩЕСТВЛЯЕТ КОРРЕКТИРОВКУ МАТРИЦЫ НАПРАВЛЯЮЩИХ КОСИНУСОВ ПО ПОКАЗАНИЯМ МАГНИТОМЕТРА
void recalc_ISC();

//РАССЧИТЫВАЕТ ТЕКУЩЕЕ СОСТОЯНИЕ АППАРАТА
void recon_AGC_STATE_TRANSMIT_DATA();

//ОПРЕДЕЛЯЕТ ВЫСОТУ ПО ДАВЛЕНИЮ
void calculate_height();

//РАССЧИТЫВАЕТ МАТРИЦУ ПОВОРОТА, УГЛОВЫЕ СКОРОСТИ, СКОРОСТИ, УСКОРЕНИЯ И ПЕРЕМЕЩЕНИЯ В ИСК И ЗАПИСЫВАЕТ ИХ В STATE
void trajectoryConstruction(float time);


//ПЕРЕДАЕТ ПЕРЕМЕЩЕНИЯ АППАРАТА В ИСК
//ПАРАМЕТР:		* translations - ссылка на массив[3], в который будут записаны перемещения аппарата по осям X, Y и Z соответственно (м)
void getTranslations (float * translations);

//ПЕРЕДАЕТ УГЛОВЫЕ СКОРОСТИ АППАРАТА В ИСК
//ПАРАМЕТР:		* angVelocityX - ссылка на массив[3], в который будут записаны угловые скорости аппарата вокруг осей X, Y и Z соответственно (рад/с)
void getAngVelocity (float * angVelocity);

//ПЕРЕДАЕТ МАТРИЦУ ПОВОРОТА АППАРАТА
//ПАРАМЕТР:		* RotationMatrix - ссылка на массив[9], в который будут записаны косинусы углов поворота ССК относительно ИСК (-)
void getRotationMatrix (float * RotationMatrix);

//РЕШАЕТ СИСТЕМУ УРАВНЕНИЯ МЕТОДОМ КРАМЕРА
//ПАРАМЕТР:		* matrix - ссылка на массив[3][3] множителей переменных
//ПАРАМЕТР:		* vector - ссылка на вектор[3] свободных членов
//ПАРАМЕТР:		* solution_vect - ссылка на вектор[3], в который будет записано решение
void solveSystemByKramer (float * Matrix, float * vector, float * solution_vect);

//ПРОИЗВОДИТ ЗАМЕНУ ЗАДАННОГО СТОЛБЦА МАТРИЦЫ НА ЗАДАННЫЙ ВЕКТОР (ДЛЯ МЕТОДА КРАМЕРА)
//при этом замененный вектор матрицы перезаписывается в исходный "vector"
//ПАРАМЕТР:		* matrix - ссылка на массив[3][3]
//ПАРАМЕТР:		* vector - ссылка на вектор[3] для замены
//ПАРАМЕТР:		* column_n - номер заменяемого столбца
void replaceColumn (float * matrix, float * vector, int column_n);

//НАХОДИТ ОПРЕДЕЛИТЕЛЬ МАТРИЦЫ 3х3
//ПАРАМЕТР:		* matrix - ссылка на массив[3][3]
float getDeterminant (float * matrix);

#endif /* KINEMATIC_UNIT_H_ */
