/*
 * model.h
 *
 *  Created on: 7 апр. 2017 г.
 *      Author: snork
 */

#ifndef MODEL_H_
#define MODEL_H_

struct model_t;
typedef struct model_t model_t;


//! Точка моделируемых данных
/*! Для унификации тут и везде используем следующие единицы измерения
 * 	Расстояния - м
 * 	Скорости - м/с
 * 	Ускорения - м/c**2
 * 	Геометрические углы - радианы
 * 	Угловые скорости - радианы/с
 * 	Частота - Гц
 */

typedef struct
{
		float ri[3];		//!< Радиус вектора аппарата в ИСК
		float vi[3];		//!< Скорость аппрата в ИСК
		float ai[3];		//!< Ускорение аппрата в ИСК
		float f_to_i[3][3];	//!< Матрица перехода от ССК к ИСК
} true_data_t;

typedef struct
{
		float af[3];	//!< Показания акселерометра (в ССК разумеется)
		float wf[3];	//!< Показания гироскопа (тоже в ССК)
} obs_data_t;

typedef struct
{
	//! то, что намоделила модель (истинное положение вещей)
	true_data_t trueData;
	//! моделируемые показания акселерометра и магнитометра
	obs_data_t obsData;
} data_point_t;


//! Инициалиация модели равноускоренного движения с двумя вращениями
/*! В плане движения центра масс - моделирует полёт аппарата под действием постоянного ускорения
 *  в плане ориентации - моделирует два движения - первое - раскачка аппарата вокруг оси Y ИСК с
 *      заданными частотой и амплитудой.
 *  Второе - равномерное вращение вокруг оси Z ССК с указанной частотой
 * Параметры:
 *  ristart - начальное положение аппарата
 *  vistart - начальная скорость аппарата
 * 	ai - вектор ускорения системы в ИСК
 * 	oscfreq - час
 */
model_t * model_init_freefal(float * ristart, float * vistart, float * ai, float oscfreq, float oscqmagn, float rotfreq);

//! Получение состояния аппарата на момент времени tsince от начала симуляции
data_point_t model_evaluate(model_t * self, float tsince);

//! Удаление модели
void model_deinit(model_t * self);


#endif /* MODEL_H_ */
